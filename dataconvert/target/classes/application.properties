#=====================
# HIBERNATE DIALECT H2
#=====================
h2.hibernate.dialect=org.hibernate.dialect.H2Dialect
#========================
# HIBERNATE CONFIGURATION
#========================
hibernate.show_sql=true
hibernate.format_sql=true
hibernate.use_sql_comments=true
hibernate.max_fetch_depth=3
hibernate.jdbc.batch_size=10
hibernate.jdbc.fetch_size=50
hibernate.hbm2ddl.auto=create-drop

# With spring.jmx.enabled set to true (the default), any beans in the context that are MBeans will be automatically registered with the JMX server. 
# This fails because Tomcat has already registered them. You have a few options:
#  - Set spring.jmx.enabled=false
#  - Exclude the bean from being exported as we do in our own JNDI DataSource configuration
#  - Use application.properties and @Bean methods to configure your data sources directly rather than using JNDI
hibernate.jmx.enabled=false

hibernate.generete_statistics=true
#==========
# CURL TEST
#==========
# curl -v -H "Accept: application/json" http://localhost:8080/dataconvert/rest/employees/
# curl -v -H "Accept: application/json" http://localhost:8080/dataconvert/employees/users/
# curl -X GET -H "Accept: application/json" http://localhost:8080/dataconvert/employees/1